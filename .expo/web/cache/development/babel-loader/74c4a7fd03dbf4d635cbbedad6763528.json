{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { encode as btoa } from 'base-64';\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var SET_DID_TRY_AL = 'SET_DID_TRY_AL';\nexport var setDidTryAL = function setDidTryAL() {\n  return {\n    type: SET_DID_TRY_AL\n  };\n};\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password) {\n  var userId = btoa(email);\n  var idToken = btoa(email + password);\n  var expiresIn = 1000;\n  return function _callee(dispatch) {\n    var expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(authenticate(userId, idToken, parseInt(expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(expiresIn) * 1000);\n            saveDataToStorage(idToken, userId, expirationDate);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  var userId = btoa(email);\n  var idToken = btoa(email + password);\n  var expiresIn = 1000;\n  return function _callee2(dispatch) {\n    var expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(authenticate(userId, idToken, parseInt(expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(expiresIn) * 1000);\n            saveDataToStorage(idToken, userId, expirationDate);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["/Users/anupam.gupta/Work/react-native/olSub/store/actions/auth.js"],"names":["encode","btoa","AUTHENTICATE","SET_DID_TRY_AL","setDidTryAL","type","authenticate","userId","token","expiryTime","dispatch","signup","email","password","idToken","expiresIn","parseInt","expirationDate","Date","getTime","saveDataToStorage","login","AsyncStorage","setItem","JSON","stringify","expiryDate","toISOString"],"mappings":";;AACA,SAASA,MAAM,IAAIC,IAAnB,QAA+B,SAA/B;AAEA,OAAO,IAAMC,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAEF;AAAR,GAAP;AACD,CAFI;AAIP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAASC,KAAT,EAAgBC,UAAhB,EAA+B;AACzD,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAEH,YAAR;AAAsBK,MAAAA,MAAM,EAAEA,MAA9B;AAAsCC,MAAAA,KAAK,EAAEA;AAA7C,KAAD,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,MAAIN,MAAM,GAAGN,IAAI,CAACW,KAAD,CAAjB;AACA,MAAIE,OAAO,GAAGb,IAAI,CAACW,KAAK,GAAGC,QAAT,CAAlB;AACA,MAAIE,SAAS,GAAG,IAAhB;AAEA,SAAO,iBAAML,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CACNJ,YAAY,CACVC,MADU,EAEVO,OAFU,EAGVE,QAAQ,CAACD,SAAD,CAAR,GAAsB,IAHZ,CADN,CAAR;AAOME,YAAAA,cARD,GAQkB,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,QAAQ,CAACD,SAAD,CAAR,GAAsB,IADxB,CARlB;AAWLK,YAAAA,iBAAiB,CAACN,OAAD,EAAUP,MAAV,EAAkBU,cAAlB,CAAjB;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAaD,CAlBM;AAoBP,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAACT,KAAD,EAAQC,QAAR,EAAqB;AACxC,MAAIN,MAAM,GAAGN,IAAI,CAACW,KAAD,CAAjB;AACA,MAAIE,OAAO,GAAGb,IAAI,CAACW,KAAK,GAAGC,QAAT,CAAlB;AACA,MAAIE,SAAS,GAAG,IAAhB;AAEA,SAAO,kBAAML,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CACNJ,YAAY,CACVC,MADU,EAEVO,OAFU,EAGVE,QAAQ,CAACD,SAAD,CAAR,GAAsB,IAHZ,CADN,CAAR;AAOME,YAAAA,cARD,GAQkB,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,QAAQ,CAACD,SAAD,CAAR,GAAsB,IADxB,CARlB;AAWLK,YAAAA,iBAAiB,CAACN,OAAD,EAAUP,MAAV,EAAkBU,cAAlB,CAAjB;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAaD,CAlBM;;AAqBP,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACZ,KAAD,EAAQD,MAAR,EAAgBU,cAAhB,EAAmC;AAC3DK,EAAAA,YAAY,CAACC,OAAb,CACE,UADF,EAEEC,IAAI,CAACC,SAAL,CAAe;AACbjB,IAAAA,KAAK,EAAEA,KADM;AAEbD,IAAAA,MAAM,EAAEA,MAFK;AAGbmB,IAAAA,UAAU,EAAET,cAAc,CAACU,WAAf;AAHC,GAAf,CAFF;AAQD,CATD","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport { encode as btoa } from 'base-64'\n\nexport const AUTHENTICATE = 'AUTHENTICATE';\nexport const SET_DID_TRY_AL = 'SET_DID_TRY_AL';\n\nexport const setDidTryAL = () => {\n    return { type: SET_DID_TRY_AL };\n  };\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return dispatch => {\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\nexport const signup = (email, password) => {\n  let userId = btoa(email);\n  let idToken = btoa(email + password);\n  let expiresIn = 1000;\n\n  return async dispatch => {\n    dispatch(\n      authenticate(\n        userId,\n        idToken,\n        parseInt(expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(expiresIn) * 1000\n    );\n    saveDataToStorage(idToken, userId, expirationDate);\n  };\n};\n\nexport const login = (email, password) => {\n  let userId = btoa(email);\n  let idToken = btoa(email + password);\n  let expiresIn = 1000;\n\n  return async dispatch => {\n    dispatch(\n      authenticate(\n        userId,\n        idToken,\n        parseInt(expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(expiresIn) * 1000\n    );\n    saveDataToStorage(idToken, userId, expirationDate);\n  };\n};\n\n\nconst saveDataToStorage = (token, userId, expirationDate) => {\n  AsyncStorage.setItem(\n    'userData',\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationDate.toISOString()\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}